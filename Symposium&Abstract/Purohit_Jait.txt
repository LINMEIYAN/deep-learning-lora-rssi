{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28600\viewh14940\viewkind0
\deftab720
\pard\pardeftab720\ri-10407\sl276\slmult1\qj\partightenfactor0

\f0\fs32 \cf0 Fingerprinting based Localization with LoRa using Deep Learning Techniques\
\pard\pardeftab720\ri0\sl276\slmult1\qj\partightenfactor0
\cf0 \
Presenter: Jait Nitinkumar Purohit\
First Reader: Dr. Xuyu Wang\
Second Reader: Dr. Xiaoyan Sun\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0

\i \cf0 \
\pard\pardeftab720\ri-10395\sl276\slmult1\qj\partightenfactor0

\i0 \cf0 	Fingerprinting Localization, a common technique used in indoor positioning uses short-range radio frequency and addresses problems with multi-path. Although, there are challenges in fingerprinting approaches like spatial ambiguity, long distances, low-bandwidth, scalability, cost and size constraints. Additionally, using BLE and Wi-Fi in indoor and outdoor environments has proven less efficient in comparison to Lora, considering location accuracy, RSSI stability, and packet-drop in line-of-sight and non-line-of-sight scenarios in GPS based applications.\
\pard\pardeftab720\fi720\ri0\sl276\slmult1\qj\partightenfactor0
\cf0 \
\pard\pardeftab720\fi720\ri-10306\sl276\slmult1\qj\partightenfactor0
\cf0 This Master Project implements fingerprinting localization using Lora (Long Range) technology for an indoor environment using Deep Learning models and also compares publicly available approach for an outdoor environment. In the offline phase of fingerprinting, 2D data at different locations have been collected, gathering RSSI values from the gateways at a fixed location. The online phase estimates the mean location error using Deep Learning models. The results from multi-layer Deep Learning Neural Network models like Artificial Neural Network (ANN), Long Short-Term Memory (LSTM) and Convolutional Neural Network (CNN) are compared here. Additionally, we have implemented hyper-parameter tuning to improve our results by changing optimizer parameters like learning-rate, batch-size, epochs and tuning model parameters like the number of hidden units, the number of layers, activation functions, and optimizers. Analysis of different parameters of LSTM has proved that using hyper-tuning parameters is very important considering back-propagation and overfitting problems in a smaller dataset.\
\pard\pardeftab720\fi720\ri0\sl276\slmult1\qj\partightenfactor0
\cf0 \
\pard\pardeftab720\fi720\ri-10333\sl276\slmult1\qj\partightenfactor0
\cf0 Indoor localization is carried out in a university building and data has been collected on the third floor. Indoor experiments using DL techniques achieve 1.2-2.0 [m] of mean distance error. Additionally, we have compared our deep-learning techniques for publicly available outdoor data-source collected from several Lorawan base-stations and Lora nodes from Antwerp city, Belgium. Interpolation techniques using de-noising auto-encoders have helped to interpolate outliers for this data. Our results have demonstrated that mean distance error of 191.52 [m] from LSTM has out-performed results from the KNN algorithm and other DL models as LSTM can forget, remember and then update the necessary information using memory cell.\
\pard\pardeftab720\fi720\ri0\sl276\slmult1\qj\partightenfactor0
\cf0 \
\pard\pardeftab720\fi720\ri-10357\sl276\slmult1\qj\partightenfactor0
\cf0 The whole approach has been implemented in a python-based framework called TensorFlow. Google Colab has been used to train models as we compare our results from different hardware accelerators like GPU and TPU. Libraries like scikit-learn and Keras for implementing different classifiers, pandas and numpy for data-preprocessing and seaborn and matplotlib for data visualization have been used in this project. Hardware devices used here are Dragino Lora gateway kit,  Arduino, GPS Lora shield and a DHT11 sensor.
\fs24 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf0 \
}